#
stormdata[grep("WINTER STORM|BLOWING SNOW|HEAVY MIX",stormdata$EVTYPE),]$EVTYPE <- "WINTER STORM"
stormdata[grep("SNOW AND ICE|SNOW/",stormdata$EVTYPE),]$EVTYPE <- "WINTER STORM"
#
# Create WINTER WEATHER GROUP
stormdata[grep("MIXED PRECIP|^SNOW",stormdata$EVTYPE),]$EVTYPE <- "WINTER WEATHER"
#Carefully strip out Freezing to leave FREEZING FOG
stormdata[grep("^FREEZING [RDS]",stormdata$EVTYPE),]$EVTYPE <- "WINTER WEATHER"
stormdata[grep("^WINTER WEATHER|WINTRY|LIGHT SNOW",stormdata$EVTYPE),]$EVTYPE <- "WINTER WEATHER"
#
# Finally, create an OTHER group for things that don't fit nicely
stormdata[grep("\\?|APACHE|DROWNING|ACCIDENT|MISHAP|SLIDE|SLUMP",stormdata$EVTYPE),]$EVTYPE <- "OTHER"
#----------------------------------------------------------------------------------
# Clean up the property/crop Damage EXplanation (PROPDMGEXP & CROPDMGEXP)
# Drop everything that is not H/K/M/B because the code book says it should be characters
#stripout all rows that have 0 for prop & crop damage
#stormdata <- stormdata[apply(stormdata[,c(4,6)],1,function(z) any(z!=0)),]
#strip out any rows that have a + or ?
stormdata <- subset(stormdata, stormdata$PROPDMGEXP != "+" & stormdata$PROPDMGEXP !=
"-" & stormdata$PROPDMGEXP != "?" & stormdata$CROPDMGEXP != "+" & stormdata$CROPDMGEXP != "-" & stormdata$CROPDMGEXP != "?" )
stormdata$PROPDMGEXP <- as.character(stormdata$PROPDMGEXP)
stormdata[grep("[hH]",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 2
stormdata[grep("[kK]",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 3
stormdata[grep("[mM]",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 6
stormdata[grep("[bB]",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 9
stormdata$CROPDMGEXP <- as.character(stormdata$CROPDMGEXP)
stormdata[grep("[kK]",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 3
stormdata[grep("[mM]",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 6
stormdata[grep("[bB]",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 9
fatalities <- aggregate(FATALITIES~EVTYPE,data=stormdata,FUN=sum)
injuries   <- aggregate(INJURIES~EVTYPE,data=stormdata,FUN=sum)
bodilyharm <- cbind(fatalities[,1:2], injuries[,2])
colnames(bodilyharm)<- c("Event","Fatalities","Injuries")
bodilyharm$Total <- bodilyharm$Fatalities + bodilyharm$Injuries
Top10_PersonalHarm <- head(arrange(bodilyharm, Total, decreasing=TRUE),n=10)
cat ("Table 1 - Top 10 Events Causing Personal Harm")
Top10_PersonalHarm[, c("Event", "Total")]
Top10_fatalities <- head(arrange(bodilyharm, Fatalities, decreasing=TRUE),n=10)
Top10_fatalities <- Top10_fatalities [,1:2]
colnames (Top10_fatalities) <- c("Event","Number")
Top10_injuries <- head(arrange(bodilyharm, Injuries, decreasing=TRUE),n=10)
Top10_injuries <- Top10_injuries [,c(1,3)]
colnames (Top10_injuries) <- c("Event","Number")
#Top10_fatalities
#Top10_injuries
cat("               Table 2 - Fatalities and Injuries")
cat (" ")
cat ("               Fatalities          Injuries")
cbind (Top10_fatalities[,1:2], Top10_injuries[,1:2])
#build the plot tables by combining both individual tables into a single table
Top10_fatalities$Type <- "Fatalities"
Top10_injuries$Type <- "Injuries"
bodilyharm <- rbind(Top10_fatalities,Top10_injuries)
bodilyharm$Type <- as.factor(bodilyharm$Type)
#
#add in the missing values for the fatalities/injuries
bodilyharm <- rbind(bodilyharm,c("EXTREME COLD/WIND CHILL",sum(stormdata[grep("EXTREME COLD/WIND CHILL",stormdata$EVTYPE),]$INJURIES),"Injuries"))
bodilyharm <- rbind(bodilyharm,c("RIP CURRENT",sum(stormdata[grep("RIP CURRENT",stormdata$EVTYPE),]$INJURIES),"Injuries"))
bodilyharm <- rbind(bodilyharm,c("ICE STORM",sum(stormdata[grep("ICE STORM",stormdata$EVTYPE),]$FATALITIES),"Fatalities"))
bodilyharm <- rbind(bodilyharm,c("WILDFIRE",sum(stormdata[grep("WILDFIRE",stormdata$EVTYPE),]$FATALITIES),"Fatalities"))
bodilyharm$Number <- as.numeric (bodilyharm$Number)
#
# Plot the events that were harmful to the population
#
#create a line plot to show trend
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="Event Type",y="Number of Fatalities/Injuries")+
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
stormdata$PROPAMT <- stormdata$PROPDMG* 10^as.numeric(stormdata$PROPDMGEXP)/(10^9)
stormdata$CROPAMT <- stormdata$CROPDMG*10^as.numeric(stormdata$CROPDMGEXP)/(10^9)
propdmg <- aggregate(PROPAMT~EVTYPE,data=stormdata,FUN=sum)
cropdmg <- aggregate(CROPAMT~EVTYPE,data=stormdata,FUN=sum)
damage <- cbind(propdmg[,1:2], cropdmg[,2])
propdmg <- aggregate(PROPAMT~EVTYPE,data=stormdata,FUN=sum)
cropdmg <- aggregate(CROPAMT~EVTYPE,data=stormdata,FUN=sum)
damage <- aggregate (PROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_propdmg <- head(arrange(damage, PROPAMT, decreasing=TRUE),n=10)
Top10_propdmg$PROPAMT <- Top10_propdmg$PROPAMT
Top10_propdmg$Type <- "PROPDMG"
colnames (Top10_propdmg) <- c("Event","Damages","Type")
damage <- aggregate (CROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_cropdmg <- head(arrange(damage, CROPAMT, decreasing=TRUE),n=10)
Top10_cropdmg$CROPAMT <- Top10_cropdmg$CROPAMT
Top10_cropdmg$Type <- "CROPDMG"
colnames (Top10_cropdmg) <- c("Event","Damages","Type")
cat ("         Table 4 - Comparison of Property Damages and Crop Damages")
cat ("")
cat ("        Property Damages ($B)                  Crop Damages ($B)")
cbind (Top10_propdmg[,1:2], Top10_cropdmg[,1:2])
damages <- rbind (Top10_propdmg,Top10_Cropdmg)
damages <- rbind (Top10_propdmg,Top10_cropdmg)
damages <- rbind (Top10_propdmg,Top10_cropdmg)
#
# Plot the events that were harmful to the population
#
#create a line plot to show trend
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
damages <- rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPAMTS),"PROPDMG"))
#
# Plot the events that were harmful to the population
#
#create a line plot to show trend
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
damages
damages <- rbind(damages,c("DROUGHT",sum(damages[grep("DROUGHT",damages$EVTYPE),]$PROPAMTS),"PROPDMG"))
damages
damage <- aggregate (PROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_propdmg <- head(arrange(damage, PROPAMT, decreasing=TRUE),n=10)
Top10_propdmg$PROPAMT <- Top10_propdmg$PROPAMT
Top10_propdmg$Type <- "PROPDMG"
colnames (Top10_propdmg) <- c("Event","Damages","Type")
damage <- aggregate (CROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_cropdmg <- head(arrange(damage, CROPAMT, decreasing=TRUE),n=10)
Top10_cropdmg$CROPAMT <- Top10_cropdmg$CROPAMT
Top10_cropdmg$Type <- "CROPDMG"
colnames (Top10_cropdmg) <- c("Event","Damages","Type")
damages <- rbind (Top10_propdmg,Top10_cropdmg)
damages
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
str (damages)
damages <- rbind(damages,c("DROUGHT",damages[grep("DROUGHT",damages$EVTYPE),]$PROPAMTS,"PROPDMG"))
str (damages)
damages$Damages <- as.numeric (damages$Damages)
damages
damages <- rbind (Top10_propdmg,Top10_cropdmg)
damages
damages[grep("DROUGHT",damages$EVTYPE),]$PROPAMTS
rbind(damages,c("DROUGHT",damages[grep("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPAMTS),"PROPDMG"))
rbind(damages,c("DROUGHT",damages[grep("DROUGHT",sum(stormdata[grep("WILDFIRE",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
stormdata[grep("DROUGHT",sum(stormdata[grep("WILDFIRE",stormdata$EVTYPE),]$PROPDMG)
rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
damages <- rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
rbind(damages,c("EXTREME COLD/WIND CHILL",sum(stormdata[grep("EXTREME COLD/WIND CHILL",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
damage <- aggregate (PROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_propdmg <- head(arrange(damage, PROPAMT, decreasing=TRUE),n=10)
Top10_propdmg$PROPAMT <- Top10_propdmg$PROPAMT
Top10_propdmg$Type <- "PROPDMG"
colnames (Top10_propdmg) <- c("Event","Damages","Type")
damage <- aggregate (CROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_cropdmg <- head(arrange(damage, CROPAMT, decreasing=TRUE),n=10)
Top10_cropdmg$CROPAMT <- Top10_cropdmg$CROPAMT
Top10_cropdmg$Type <- "CROPDMG"
colnames (Top10_cropdmg) <- c("Event","Damages","Type")
damages <- rbind (Top10_propdmg,Top10_cropdmg)
rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPAMT),"PROPDMG"))
stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPAMT
damages <- rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG),"PROPDMG"))
damages
rbind(damages,c("DROUGHT",sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG)/(10^9),"PROPDMG"))
propdmg <- aggregate(PROPAMT~EVTYPE,data=stormdata,FUN=sum)
propdmg
cropdmg <- aggregate(CROPAMT~EVTYPE,data=stormdata,FUN=sum)
sum(stormdata[grep("DROUGHT",stormdata$EVTYPE),]$PROPDMG)/(10^9)
damages <- rbind(damages,c("DROUGHT",sum(propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPDMG)/(10^9),"PROPDMG"))
damages
propdmg
rbind(damages,c("DROUGHT",propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPDMG),"PROPDMG"))
rbind(damages,c("DROUGHT",propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPDMG,"PROPDMG"))
c("DROUGHT",propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPDMG,"PROPDMG")
propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPAMT
PROPDMG
propdmg
damages <- rbind (Top10_propdmg,Top10_cropdmg)
damages
damages <- rbind(damages,c("DROUGHT",propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages
damages <- rbind(damages,c("EXTREME COLD/WIND CHILL",propdmg[grep("EXTREME COLD/WIND CHILL",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages
damages <- rbind(damages,c("FROST/FREEZE",propdmg[grep("FROST/FREEZE",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages
damages <- rbind(damages,c("HEAVY RAIN",propdmg[grep("HEAVY RAIN",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages
damages <- rbind(damages,c("ICE STORM",propdmg[grep("ICE STORM",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages
rbind(damages,c("STORM SURGE/TIDE",cropdmg[grep("STORM SURGE/TIDE",cropdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
cropdmg
rbind(damages,c("STORM SURGE/TIDE",cropdmg[grep("STORM SURGE/TIDE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("STORM SURGE/TIDE",cropdmg[grep("STORM SURGE/TIDE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
rbind(damages,c("TORNADO",cropdmg[grep("TORNADO",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
rbind(damages,c("TROPICAL STORM",cropdmg[grep("TROPICAL STORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
rbind(damages,c("WILDFIRE",cropdmg[grep("WILDFIRE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages
damages
damages <- rbind(damages,c("TORNADO",cropdmg[grep("TORNADO",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("TROPICAL STORM",cropdmg[grep("TROPICAL STORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("WILDFIRE",cropdmg[grep("WILDFIRE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
rbind(damages,c("WINTER STORM",cropdmg[grep("WINTERSTORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("WINTER STORM",cropdmg[grep("WINTERSTORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
damages <- damages [1:29,]
damages
damages <- rbind(damages,c("WINTER STORM",cropdmg[grep("WINTER STORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages
damages$Damages <- as.numeric (damages$Damages)
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
cbind (Top10_propdmg[,1:2], Top10_cropdmg[,1:2])
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
coord_flip () +
#         coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
damages
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages")+
coord_flip ()
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages <br>$ Billions")+
coord_flip ()
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="Event Type",y="Damages \n$ Billions")+
coord_flip ()
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))+
theme(axis.text.x=element_text(angle=40,hjust=1))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_flip () +
coord_cartesian(ylim = c(0,15000))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
coord_flip () +
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_cartesian(ylim = c(0,15000))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_cartesian(ylim = c(0,15000))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_cartesian(ylim = c(0,15000))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")+
coord_cartesian(xlim = c(0,15000))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
y="Number of Fatalities/Injuries")
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
x="",y="Damages \n$ Billions")+
coord_flip ()
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+ ylim=15000
?ylim
?xlim
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
coord_flip () +
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_cartesian(ylim = c(0,15000))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))
damages <- sort(damages, PROPAMT+CROPAMT)
?sort
?order
damages <- arrange(damages, damages$PROPAMT+CROPAMT)
damages <- arrange(damages, damages$PROPAMT+damages$CROPAMT)
#
damages <- arrange(damages, damages$PROPAMT)
?arrange
damages <- arrange(damages, damages$Damages)
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
stormdata$PROPAMT <- stormdata$PROPDMG* 10^as.numeric(stormdata$PROPDMGEXP)/(10^9)
stormdata$CROPAMT <- stormdata$CROPDMG*10^as.numeric(stormdata$CROPDMGEXP)/(10^9)
propdmg <- aggregate(PROPAMT~EVTYPE,data=stormdata,FUN=sum)
cropdmg <- aggregate(CROPAMT~EVTYPE,data=stormdata,FUN=sum)
damage <- aggregate (PROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_propdmg <- head(arrange(damage, PROPAMT, decreasing=TRUE),n=10)
Top10_propdmg$PROPAMT <- Top10_propdmg$PROPAMT
Top10_propdmg$Type <- "PROPDMG"
colnames (Top10_propdmg) <- c("Event","Damages","Type")
damage <- aggregate (CROPAMT~EVTYPE, data=stormdata, FUN=sum)
Top10_cropdmg <- head(arrange(damage, CROPAMT, decreasing=TRUE),n=10)
Top10_cropdmg$CROPAMT <- Top10_cropdmg$CROPAMT
Top10_cropdmg$Type <- "CROPDMG"
colnames (Top10_cropdmg) <- c("Event","Damages","Type")
cat ("         Table 4 - Comparison of Property Damages and Crop Damages")
cat ("")
cat ("        Property Damages ($B)                  Crop Damages ($B)")
cbind (Top10_propdmg[,1:2], Top10_cropdmg[,1:2])
damages <- rbind (Top10_propdmg,Top10_cropdmg)
#add in the missing values for the fatalities/injuries
damages <- rbind(damages,c("DROUGHT",propdmg[grep("DROUGHT",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages <- rbind(damages,c("EXTREME COLD/WIND CHILL",propdmg[grep("EXTREME COLD/WIND CHILL",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages <- rbind(damages,c("FROST/FREEZE",propdmg[grep("FROST/FREEZE",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages <- rbind(damages,c("HEAVY RAIN",propdmg[grep("HEAVY RAIN",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages <- rbind(damages,c("ICE STORM",propdmg[grep("ICE STORM",propdmg$EVTYPE),]$PROPAMT,"PROPDMG"))
damages <- rbind(damages,c("STORM SURGE/TIDE",cropdmg[grep("STORM SURGE/TIDE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("TORNADO",cropdmg[grep("TORNADO",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("TROPICAL STORM",cropdmg[grep("TROPICAL STORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("WILDFIRE",cropdmg[grep("WILDFIRE",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages <- rbind(damages,c("WINTER STORM",cropdmg[grep("WINTER STORM",cropdmg$EVTYPE),]$CROPAMT,"CROPDMG"))
damages$Damages <- as.numeric (damages$Damages)
damages
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
d1 <-order(damages,Type)
d1 <-order(damages,damages$Type)
d1 <- arrange(damages,damages$Type)
di
d1
d2 <- damages
damages <- d1
damages
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
damages <- arrange(damages,damages$Type)
g<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 2 - Damages by Event Type\n",fill="",
y="Damages \n$ Billions")+
coord_flip ()
bodilyharm <- arrange (bodilyharm, bodilyharm$Type)
#create a line plot to show trend
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))
bodilyharm
?sum
bodilyharm[grep("TORNADO",bodilyharm$EVTYPE),]$TOTAL)
bodilyharm[grep("TORNADO",bodilyharm$EVTYPE),]$TOTAL
bodilyharm
sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))
l1 <- as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number))
g+ annotate("text", x = "WILDFIRE", y = 10000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "WILDFIRE", y = 10000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "TORNADO", y = 13000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
Top10_propdmg [1,]
Top10_PersonalHarm [1,]
as.numeric(Top10_propdmg [1,2])
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Event Types Harmful to Public Health\n",fill="",
x="Event Type",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))
bodilyharm
bodilyharm [-grep("EXTREME COLD",bodilyharm$EVTYPE),]
bodilyharm [-grep("EXTREME COLD",bodilyharm$Event),]
bodilyharm <-bodilyharm [-grep("EXTREME COLD",bodilyharm$Event),]
bodilyharm
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Top Event Types Most Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "TORNADO", y = 13000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
bodilyharm <-bodilyharm [-grep("RIP CURRENT",bodilyharm$Event),]
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Top Event Types Most Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "TORNADO", y = 13000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Top 10 Weather Events Most Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "TORNADO", y = 13000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
g<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type)))
g + geom_bar(position="stack",stat="identity")+
labs(title="Figure 1 - Top 10 Weather Events Most Harmful to Public Health\n",fill="",
x="",y="Number of Fatalities/Injuries")+
coord_flip (ylim = c(0,15000))+
annotate("text", x = "TORNADO", y = 14000, label = as.character(sum(bodilyharm[grep("TORNADO",bodilyharm$Event),]$Number)))
#
#install and load the ggplot2 package
options (warn=-1) #suppress warnings
install.packages ("ggplot2", repos="http://cran.rstudio.com/")
library (ggplot2)
library (grid)  #needed for theme panel margin units
library (plyr)
options (warn=0) #turn warnings back on
#
# Document the Software Environment to make it easily reproduced
#
sessionInfo ()
install.packages("ggplot2", repos = "http://cran.rstudio.com/")
?options
?install.packages
?options
