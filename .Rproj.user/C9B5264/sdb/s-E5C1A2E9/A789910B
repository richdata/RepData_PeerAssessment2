{
    "contents" : "---\ntitle: \"Reproducible Results - <BR>\nAnalysis of  NOAA Storm Database\"\nauthor: \"richdata\"\ndate: \"Tuesday, November 11, 2014\"\noutput: html_document\n---\n\n\n\n## Synopsis\nStorms and other severe weather events can cause both public health and economic problems for communities and municipalities. Many severe events can result in fatalities, injuries, and property damage, and preventing such outcomes to the extent possible is a key concern.\n\nThis project involves exploring the U.S. National Oceanic and Atmospheric Administration's (NOAA) storm database. This database tracks characteristics of major storms and weather events in the United States, including when and where they occur, as well as estimates of any fatalities, injuries, and property damage.\n\nThe basic goal of this assignment is to explore the NOAA Storm Database and answer two questions about severe weather events. \n\n1. Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?\n2. Across the United States, which types of events have the greatest economic consequences?\n\n## Data Processing \n### Initialization\nTo begin, some initial housekeeping is required to ensure this is a reproducible research project by installing/loading the needed datasets, documenting the environment, downloading the data and reading the file.  It should be noted that there was a considerable exploration effort outside of this document that gained some insights into the data.  Those efforts are not included here.\n\n\n``` {r initialsetup}\n#\n#install and load the ggplot2 package\n\n#install.packages (\"ggplot2\", repos=\"http://cran.rstudio.com/\")\nlibrary (ggplot2)\nlibrary (grid)  #needed for theme panel margin units\nlibrary (plyr)\n\n#\n# Document the Software Environment to make it easily reproduced\n#\nsessionInfo ()\n\n```\n\n\n```{r getdata}\nsetwd (\"~/My Personal Stuff/coursera/Reproducible Research/Project2\")\n\n# if the data directory doesn't exist create it\n\nif (!file.exists(\"Data\")) {\n        dir.create(\"Data\")\n        }\n\n#if the data file doesn't exist, the download it\n\nif(!file.exists(\"Data/repdata-data-StormData.csv.bz2\")) {\n        fileURL <- \"http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\"\n        download.file(fileURL, destfile = \"./Data/repdata-data-StormData.csv.bz2\")\n        fileNAME <- \"./Data/repdata-data-StormData.csv.bz2\"\n        }\n\nstormdata <- read.csv(bzfile(\"./data/repdata-data-StormData.csv.bz2\"))\n\n#strip out only data we're interested in\nstormdata <- stormdata [, c(\"EVTYPE\",\"FATALITIES\",\"INJURIES\",\"PROPDMG\",\"PROPDMGEXP\",\"CROPDMG\",\"CROPDMGEXP\")]\n\n```\n\n### Cleaning the data\nTo speed things up somewhat, the original dataset will be stripped of unnecessary columns and any rows that contain zero values in all relevant study variables (i.e. Fatalities, Injuries, Property Damage and Crop Damage).  This reduction will remove 30 variables and over 65,000 observations.\n\nAdditionally, the CODEBOOK associated with this dataset, https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf, suggests there are 48 unique events.  However, initial exploration of the EVTYPES in the dataset indicated there were 898 different event types!  Some significant cleaning and consolidation of the data will be needed.\n\n\n``` {r cleandata}\n# remove any rows that don't have any fatalities, injuries or damage\nstormdata <- stormdata[apply(stormdata[c(2,3,4,6)],1,function(z) any(z!=0)),] \n\n#make sure all datas are all upper case to normalize categories\n#for example Wintry mix, Wintry Mix and WINTRY MIX\nstormdata$EVTYPE <- as.factor (toupper (stormdata$EVTYPE))\n\n#\n#There are a bunch of Event Types that are obvious typos and variations \n#There are also far many events than the 48 called out in the Cookbook Table 2.1.1\n# located here: https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf\n\n#Let's first consolidate and clean up a bit.\n\n# Create an AVALANCHE Group (mainly fix spelling error)\n#\nstormdata[grep(\"AVALANCE\",stormdata$EVTYPE),]$EVTYPE <- \"AVALANCHE\"\n#\n# Create a BLIZZARD Group\n#\nstormdata[grep(\"BLIZZARD\",stormdata$EVTYPE),]$EVTYPE <- \"BLIZZARD\"\n#\n# Create COASTAL FLOOD Group\n#\n#Put Coastal Surge into Storm Surge/Tide group instead of Coastal Flooding\nstormdata[grep(\"COASTAL SURGE\",stormdata$EVTYPE),]$EVTYPE <- \"STORM SURGE/TIDE\" \nstormdata[grep(\"COASTAL|BEACH EROSION|CSTL FLOOD|TIDAL FLOODING|ASTRONOMICAL HIGH TIDE\",stormdata$EVTYPE),]$EVTYPE <- \"COASTAL FLOOD\"\n#\n# Create a COLD Groups\n#\n#put COLD AIR TORNADO in the TORNADO GROUP\nstormdata[grep(\"COLD AIR TORNADO\",stormdata$EVTYPE),]$EVTYPE <- \"TORNADO\"\nstormdata[grep(\"^COLD|HYPOTHERMIA|LOW TEMPERATURE\",stormdata$EVTYPE),]$EVTYPE  <-\"COLD/WIND CHILL\"\nstormdata[grep(\" COLD|WINDCHILL|EXTREME WIND CHILL\",stormdata$EVTYPE),]$EVTYPE <- \"EXTREME COLD/WIND CHILL\"\n#\n# combine the FOG entries into DENSE FOG, except FREEZING FOG\nstormdata[grep(\"DENSE FOG|^FOG\",stormdata$EVTYPE),]$EVTYPE <- \"DENSE FOG\"\n#\n# combine the DROUGHT entries into one\nstormdata[grep(\"DROUGHT\",stormdata$EVTYPE),]$EVTYPE <- \"DROUGHT\"\n# Create DUST Events: Devil & Storm\n#\nstormdata[grep(\"DUST DEVIL\",stormdata$EVTYPE),]$EVTYPE <- \"DUST DEVIL\"\nstormdata[grep(\"DUST STORM|BLOWING DUST\",stormdata$EVTYPE),]$EVTYPE <- \"DUST STORM\"\n#\n# Group HEAT Events\n#\nstormdata[grep(\"HEAT WAVE|RECORD HEAT|RECORD/EXCESSIVE HEAT|EXTREME HEAT\",stormdata$EVTYPE),]$EVTYPE <- \"EXCESSIVE HEAT\"\nstormdata[grep(\"HYPERTHERMIA|WARM\",stormdata$EVTYPE),]$EVTYPE=\"HEAT\"\n#\n# combine the FLOOD Groups(FLASH-COMBINE FLash type events, FLOOD-All Other)\n# NOTE - Need to keep LAKESHORE FLOOD separate so careful selection will be needed\n\nstormdata[grep(\"FLASH|DAM BREAK|RAPIDLY RISING WATER\",stormdata$EVTYPE),]$EVTYPE <- \"FLASH FLOOD\"\nstormdata[grep(\"FLOODING|HIGH WATER|ICE JAM|URBAN\",stormdata$EVTYPE),]$EVTYPE <- \"FLOOD\"\nstormdata[grep(\"RIVER FL|URBAN FL|RURAL FL|STREAM FL\",stormdata$EVTYPE),]$EVTYPE<- \"FLOOD\"\nstormdata[grep(\"FLOODS|MAJOR FL|& FLOOD|AND FLOOD|FLOOD &\",stormdata$EVTYPE),]$EVTYPE <- \"FLOOD\"\nstormdata[grep(\"FLOOD/|/ FLOOD\",stormdata$EVTYPE),]$EVTYPE <- \"FLOOD\"\n#\n# Create FREEZE Group\n#\nstormdata[grep(\"FREEZE|FROST\",stormdata$EVTYPE),]$EVTYPE <- \"FROST/FREEZE\"\n#\n# Create HAIL Group\n#\nstormdata[grep(\"^HAIL|SMALL HAIL|/HAIL\",stormdata$EVTYPE),]$EVTYPE <- \"HAIL\"\n#\n# Create a HEAVY RAIN Group (INCLUDE HEAVY PERCIP BECAUSE DATA COMMENT DISCUSSES RAINFALL)\n#\nstormdata[grep(\"FREEZING RAIN\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\nstormdata[grep(\"HEAVY RAIN|HEAVY SHOWER|HVY RAIN\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY RAIN\"\nstormdata[grep(\"WETNESS|COOL AND WET|HEAVY PRECIPITATION\",stormdata$EVTYPE),]$EVTYPE<-\"HEAVY RAIN\"\nstormdata[grep(\"RECORD RAIN|RAINSTORM|^UNSEASONAL RAIN\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY RAIN\"\nstormdata[grep(\"EXCESSIVE RAIN|RAIN/|^RAIN$\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY RAIN\"\nstormdata[grep(\"TORRENTIAL RAIN|WIND/RAIN\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY RAIN\"\n#\n# Create a HEAVY SNOW Group\n#\nstormdata[grep(\"HEAVY SNOW|RECORD SNOW|EXCESSIVE SNOW\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY SNOW\"\nstormdata[grep(\"HEAVY LAKE SNOW|LATE SEASON\",stormdata$EVTYPE),]$EVTYPE <- \"HEAVY SNOW\"\n#\n# Create a HIGH SURF Group (Put RIP CURRENTS/SURF into RIP CURRENTS FIRST)\n#\nstormdata[grep(\"RIP\",stormdata$EVTYPE),]$EVTYPE=\"RIP CURRENT\"\nstormdata[grep(\"SURF|SWELLS|ROGUE WAVE|ROUGH SEA|HEAVY SEAS|HIGH SEAS|HIGH WAVE\",stormdata$EVTYPE),]$EVTYPE<-\"HIGH SURF\"\n#\n# Create a HIGHWINDS\n#\n#raw data suggests this lone \"HIGH\" is high wind\nstormdata[stormdata$EVTYPE == \"HIGH\",]$EVTYPE <- \"HIGH WIND\" \nstormdata[grep(\"^HIGH WIND|HIGH  WINDS|STORM FORCE WIND\",stormdata$EVTYPE),]$EVTYPE<-\"HIGH WIND\"\n#\n# Create a HURRICANE Group\n#\nstormdata[grep(\"HURRICANE|TYPHOON\",stormdata$EVTYPE),]$EVTYPE <- \"HURRICANE/TYPHOON\"\n#\n# Create a ICE Group before snow because doing snow first would pull out ICE AND SNOW \n# -- assumption is if ICE is listed first, it is more impactful.\n#\n#But first move non-ice storm events into Winter Weather & ICE FLOES to OTHER\nstormdata[grep(\"BLACK ICE|ROAD\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\nstormdata[grep(\"ICE FLOES\",stormdata$EVTYPE),]$EVTYPE <- \"OTHER\"\nstormdata[grep(\"^ICE|^ICY|GLAZE|ICE STORM\",stormdata$EVTYPE),]$EVTYPE <- \"ICE STORM\"\n#\n# LAKE EFFECT SNOW\n#\nstormdata[grep(\"LAKE.*SNOW\",stormdata$EVTYPE),]$EVTYPE<- \"LAKE EFFECT SNOW\"\n#\n# LAKESHORE FLOODING\n#\nstormdata[grep(\"LAKE FLOOD\",stormdata$EVTYPE),]$EVTYPE<- \"LAKESHORE FLOOD\"\n# Create LIGHTNING Group\n#\nstormdata[grep(\"LIGHTNING|LIGHTING|LIGNTNING\",stormdata$EVTYPE),]$EVTYPE <- \"LIGHTNING\"\n#\n# Combine Marine TSTM and MARINE THUNDERSTORM EVENTS\n#\nstormdata[grep(\"MARINE TSTM\",stormdata$EVTYPE),]$EVTYPE <- \"MARINE THUNDERSTORM WIND\"\n\n#\n# Create SLEET Group by putting SNOW/SLEET into WINTERWEATHER and leaving just SLEET\n#\nstormdata[grep(\"SNOW/SLEET\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\n#\n# Create SURGE/TIED Group by combining the two types of STORM SURGE\n#\nstormdata[grep(\"STORM SURGE|HIGH TIDE\",stormdata$EVTYPE),]$EVTYPE <- \"STORM SURGE/TIDE\"\n#\n# Create a STRONG WINDS Group\nstormdata[grep(\"^WIND|GUSTY WIND|SEVERE TURBULENCE\",stormdata$EVTYPE),]$EVTYPE<-\"STRONG WIND\"\nstormdata[grep(\"^STRONG WIND|^GRADIENT|NON.*TSTM|WIND DAM\",stormdata$EVTYPE),]$EVTYPE<-\"STRONG WIND\"\n#\n# Create a THUNDERSTORM WIND Group\n#\nstormdata[grep(\"^THUNDER|^TSTM|BURST|TUNDERSTORM|THUNERSTORM|THUDER|THUNDEER\",stormdata$EVTYPE),]$EVTYPE <- \"THUNDERSTORM WIND\"\nstormdata[grep(\"^THUNDER|^SEVERE THUNDER\",stormdata$EVTYPE),]$EVTYPE <- \"THUNDERSTORM WIND\"\nstormdata[grep(\"TSTM WIND|GUSTNADO|WHIRLWIND\",stormdata$EVTYPE),]$EVTYPE <- \"THUNDERSTORM WIND\"\n#\n# Create a TORNADO Group\n#\nstormdata[grep(\"TORNADO|TORNDAO|LANDSPOUT\",stormdata$EVTYPE),]$EVTYPE <- \"TORNADO\"\n#\n# Consolidate all TROPICAL STORM \n#\nstormdata[grep(\"TROPICAL STORM\",stormdata$EVTYPE),]$EVTYPE <- \"TROPICAL STORM\"\n#\n# Create a WATERSPOUT Group \n#\nstormdata[grep(\"^WATERSPOUT\",stormdata$EVTYPE),]$EVTYPE <- \"WATERSPOUT\"\n#\n# Create a WILDFIRE Group \n#\nstormdata[grep(\"FIRE\",stormdata$EVTYPE),]$EVTYPE <- \"WILDFIRE\"\n#\n#Create a WINTER STORM GROUP\n# From CODEBOOK-A winter weather event which has more than one significant hazard \n#  (i.e., heavy snow and blowing snow; snow and ice; snow and sleet; sleet and ice; or snow, sleet \n# and ice) \n#\nstormdata[grep(\"WINTER STORM|BLOWING SNOW|HEAVY MIX\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER STORM\"\nstormdata[grep(\"SNOW AND ICE|SNOW/\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER STORM\"\n#\n# Create WINTER WEATHER GROUP\nstormdata[grep(\"MIXED PRECIP|^SNOW\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\n#Carefully strip out Freezing to leave FREEZING FOG\nstormdata[grep(\"^FREEZING [RDS]\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\nstormdata[grep(\"^WINTER WEATHER|WINTRY|LIGHT SNOW\",stormdata$EVTYPE),]$EVTYPE <- \"WINTER WEATHER\"\n#\n# Finally, create an OTHER group for things that don't fit nicely\n\nstormdata[grep(\"\\\\?|APACHE|DROWNING|ACCIDENT|MISHAP|SLIDE|SLUMP\",stormdata$EVTYPE),]$EVTYPE <- \"OTHER\"\n\n#----------------------------------------------------------------------------------\n# Clean up the property/crop Damage EXplanation (PROPDMGEXP & CROPDMGEXP)\n# Drop everything that is not H/K/M/B because the code book says it should be characters\n#stripout all rows that have 0 for prop & crop damage\n#stormdata <- stormdata[apply(stormdata[,c(4,6)],1,function(z) any(z!=0)),] \n#strip out any rows that have a + or ?\nstormdata <- subset(stormdata, stormdata$PROPDMGEXP != \"+\" & stormdata$PROPDMGEXP != \n    \"-\" & stormdata$PROPDMGEXP != \"?\" & stormdata$CROPDMGEXP != \"+\" & stormdata$CROPDMGEXP != \"-\" & stormdata$CROPDMGEXP != \"?\" )\n\nstormdata$PROPDMGEXP <- as.character(stormdata$PROPDMGEXP)\nstormdata[grep(\"[hH]\",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 2\nstormdata[grep(\"[kK]\",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 3\nstormdata[grep(\"[mM]\",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 6\nstormdata[grep(\"[bB]\",stormdata$PROPDMGEXP),]$PROPDMGEXP <- 9\n\nstormdata$CROPDMGEXP <- as.character(stormdata$CROPDMGEXP)\nstormdata[grep(\"[kK]\",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 3\nstormdata[grep(\"[mM]\",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 6\nstormdata[grep(\"[bB]\",stormdata$CROPDMGEXP),]$CROPDMGEXP <- 9\n```\n\n## Results\nThe following table shows the weather events with the number of fatalities, injuries and total of fatalities and injuries.  The table shows the top 10 events in descending ordered based on the Total number of harmful observations.  Tornados are by far the most dangerous weather event to humans by a almost 10 times more harm than Thunderstorm winds.\n\n``` {r total_harmful_report}\nfatalities <- aggregate(FATALITIES~EVTYPE,data=stormdata,FUN=sum)\ninjuries   <- aggregate(INJURIES~EVTYPE,data=stormdata,FUN=sum)\nbodilyharm <- cbind(fatalities[,1:2], injuries[,2])\ncolnames(bodilyharm)<- c(\"Event\",\"Fatalities\",\"Injuries\")\nbodilyharm$Total <- bodilyharm$Fatalities + bodilyharm$Injuries\nTop10_PersonalHarm <- head(arrange(bodilyharm, Total, decreasing=TRUE),n=10)\n\nTop10_PersonalHarm[, c(\"Event\", \"Total\")]\n\n```\nLooking at fatalities and injuries individually, tornados remain at the top of bot types of injuries but that is where the commonality ends.  Excessive Heat is the #2 event for fatalities and #3 in overall injuries.  \n\nIce storms and fires show up in the injuries list but they aren't in the top 10 of fatalities.  Likewise, rip currents and Extreme cold/wind chill are more fatal than causing injuries.\n``` {r fatalities_injuries_sidexside}\nTop10_fatalities <- head(arrange(bodilyharm, Fatalities, decreasing=TRUE),n=10)\nTop10_fatalities <- Top10_fatalities [,1:2]\ncolnames (Top10_fatalities) <- c(\"Event\",\"Number\")\n\nTop10_injuries <- head(arrange(bodilyharm, Injuries, decreasing=TRUE),n=10)\nTop10_injuries <- Top10_injuries [,c(1,3)]\ncolnames (Top10_injuries) <- c(\"Event\",\"Number\")\n\ncbind (Top10_fatalities[,1:2], Top10_injuries[,1:2])\n\n```\nFigure 1 shows the total harm to the public health for each of the top 10 event types for fatalities and injuries.  In order to visually see the relative numbers for fatalities and injuries for each of the events, the y-axis is arbitrarily clipped at 15,000.  \n\n\n``` {r harmful_plot}\n\n#build the plot tables by combining both individual tables into a single table\n\nTop10_fatalities$Type <- \"Fatalities\"\nTop10_injuries$Type <- \"Injuries\"\nbodilyharm <- rbind(Top10_fatalities,Top10_injuries)\nbodilyharm$Type <- as.factor(bodilyharm$Type)\n#\n#add in the missing values for the fatalities/injuries\nbodilyharm <- rbind(bodilyharm,c(\"EXTREME COLD/WIND CHILL\",sum(stormdata[grep(\"EXTREME COLD/WIND CHILL\",stormdata$EVTYPE),]$INJURIES),\"Injuries\"))\nbodilyharm <- rbind(bodilyharm,c(\"RIP CURRENT\",sum(stormdata[grep(\"RIP CURRENT\",stormdata$EVTYPE),]$INJURIES),\"Injuries\"))\nbodilyharm <- rbind(bodilyharm,c(\"ICE STORM\",sum(stormdata[grep(\"ICE STORM\",stormdata$EVTYPE),]$FATALITIES),\"Fatalities\"))\nbodilyharm <- rbind(bodilyharm,c(\"WILDFIRE\",sum(stormdata[grep(\"WILDFIRE\",stormdata$EVTYPE),]$FATALITIES),\"Fatalities\"))\nbodilyharm$Number <- as.numeric (bodilyharm$Number)\nbodilyharm <- arrange (bodilyharm, bodilyharm$Type)\n\n#\n# Plot the events that were harmful to the population\n#\n#create a line plot to show trend\ng<- ggplot (bodilyharm, aes(x=Event, y=Number, fill=factor(Type))) + coord_flip ()\ng + geom_bar(position=\"stack\",stat=\"identity\")+ \n        labs(title=\"Figure 1 - Event Types Harmful to Public Health\\n\",fill=\"\",\n        x=\"\",y=\"Number of Fatalities/Injuries\")+\n        coord_flip (ylim = c(0,15000))+\n        annotate(\"text\", x = \"TORNADO\", y = 13000, label = as.character(sum(bodilyharm[grep(\"TORNADO\",bodilyharm$Event),]$Number)))\n\n```\n\n\nDamage report\n\n``` {r damage_report}\n#\n#calculate total property and crop damage for each observation\nstormdata$PROPAMT <- stormdata$PROPDMG* 10^as.numeric(stormdata$PROPDMGEXP)/(10^9)\nstormdata$CROPAMT <- stormdata$CROPDMG*10^as.numeric(stormdata$CROPDMGEXP)/(10^9)\n\npropdmg <- aggregate(PROPAMT~EVTYPE,data=stormdata,FUN=sum)\ncropdmg <- aggregate(CROPAMT~EVTYPE,data=stormdata,FUN=sum)\n\ndamage <- aggregate (PROPAMT~EVTYPE, data=stormdata, FUN=sum)\nTop10_propdmg <- head(arrange(damage, PROPAMT, decreasing=TRUE),n=10)\nTop10_propdmg$PROPAMT <- Top10_propdmg$PROPAMT\nTop10_propdmg$Type <- \"PROPDMG\"\ncolnames (Top10_propdmg) <- c(\"Event\",\"Damages\",\"Type\")\n\ndamage <- aggregate (CROPAMT~EVTYPE, data=stormdata, FUN=sum)\nTop10_cropdmg <- head(arrange(damage, CROPAMT, decreasing=TRUE),n=10)\nTop10_cropdmg$CROPAMT <- Top10_cropdmg$CROPAMT\nTop10_cropdmg$Type <- \"CROPDMG\"\ncolnames (Top10_cropdmg) <- c(\"Event\",\"Damages\",\"Type\")\n\ncbind (Top10_propdmg[,1:2], Top10_cropdmg[,1:2])\n\ndamages <- rbind (Top10_propdmg,Top10_cropdmg)\n\n#add in the missing values for the fatalities/injuries\ndamages <- rbind(damages,c(\"DROUGHT\",propdmg[grep(\"DROUGHT\",propdmg$EVTYPE),]$PROPAMT,\"PROPDMG\"))\ndamages <- rbind(damages,c(\"EXTREME COLD/WIND CHILL\",propdmg[grep(\"EXTREME COLD/WIND CHILL\",propdmg$EVTYPE),]$PROPAMT,\"PROPDMG\"))\ndamages <- rbind(damages,c(\"FROST/FREEZE\",propdmg[grep(\"FROST/FREEZE\",propdmg$EVTYPE),]$PROPAMT,\"PROPDMG\"))\ndamages <- rbind(damages,c(\"HEAVY RAIN\",propdmg[grep(\"HEAVY RAIN\",propdmg$EVTYPE),]$PROPAMT,\"PROPDMG\"))\ndamages <- rbind(damages,c(\"ICE STORM\",propdmg[grep(\"ICE STORM\",propdmg$EVTYPE),]$PROPAMT,\"PROPDMG\"))\ndamages <- rbind(damages,c(\"STORM SURGE/TIDE\",cropdmg[grep(\"STORM SURGE/TIDE\",cropdmg$EVTYPE),]$CROPAMT,\"CROPDMG\"))\ndamages <- rbind(damages,c(\"TORNADO\",cropdmg[grep(\"TORNADO\",cropdmg$EVTYPE),]$CROPAMT,\"CROPDMG\"))\ndamages <- rbind(damages,c(\"TROPICAL STORM\",cropdmg[grep(\"TROPICAL STORM\",cropdmg$EVTYPE),]$CROPAMT,\"CROPDMG\"))\ndamages <- rbind(damages,c(\"WILDFIRE\",cropdmg[grep(\"WILDFIRE\",cropdmg$EVTYPE),]$CROPAMT,\"CROPDMG\"))\ndamages <- rbind(damages,c(\"WINTER STORM\",cropdmg[grep(\"WINTER STORM\",cropdmg$EVTYPE),]$CROPAMT,\"CROPDMG\"))\n\ndamages$Damages <- as.numeric (damages$Damages)\n\ndamages <- arrange(damages,damages$Type)\n\n#\n# Plot the events that were harmful to the population\n#\n#create a line plot to show trend\ng<- ggplot (damages, aes(x=Event, y=Damages, fill=factor(Type)))\ng + geom_bar(position=\"stack\",stat=\"identity\")+ \n        labs(title=\"Figure 2 - Damages by Event Type\\n\",fill=\"\",\n        y=\"Damages \\n$ Billions\")+\n        coord_flip () \n```",
    "created" : 1415840236271.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "25|20|39|3|\n",
    "hash" : "3149869047",
    "id" : "A789910B",
    "lastKnownWriteTime" : 1416461079,
    "path" : "~/My Personal Stuff/coursera/Reproducible Research/Project2/PA2.Rmd",
    "project_path" : "PA2.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}